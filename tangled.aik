; opcodes are usually the top 8 bits,
; but the top 4 bits define groups with similar properties

sys             :=      0x0:4 0x000:12

; 8 bit opcode, take 4 bit operand, 4 0s    ; jed looks at these
jumpr $.a       :=      0x10:8 .a:4 0:4
neg $.d         :=      0x11:8 .d:4 0:4
negf $.d        :=      0x12:8 .d:4 0:4       ; ben
not $.d         :=      0x13:8 .d:4 0:4

; 4 bit opcode, take 4 bit + 8 bit operand
brf $.c, .addr  :=      0x2:4 .c:4 (.addr-.):8
brt $.c, .addr	:=	0x3:4 .c:4 (.addr-.):8
lex $.d, .imm8  :=      0x4:4 .d:4 .imm8:8
lhi $.d, .imm8	:=	0x5:4 .d:4 .imm8:8

; 8 bit opcode
add $.d, $.s	:=	0x60:8 .d:4 .s:4              ; done these
mul $.d, $.s    :=      0x61:8 .d:4 .s:4
slt $.d, $.s    :=      0x62:8 .d:4 .s:4
and $.d, $.s    :=      0x63:8 .d:4 .s:4
or $.d, $.s	:=	0x64:8 .d:4 .s:4
xor $.d, $.s	:=	0x65:8 .d:4 .s:4
shift $.d, $.s	:=	0x66:8 .d:4 .s:4

; 8 bit opcode                                ; ben will do floats
addf $.d, $.s	:=	0x70:8 .d:4 .s:4
mulf $.d, $.s	:=	0x71:8 .d:4 .s:4
sltf $.d, $.s   :=      0x72:8 .d:4 .s:4
recip $.d	:=	0x74:8 .d:4 0:4
float $.d       :=      0x78:8 .d:4 0:4
int $.d		:=	0x79:8 .d:4 0:4
copy $.d, $.s   :=	0x7a:8 .d:4 .s:4            ; jed
load $.d, $.s   :=      0x7b:8 .d:4 .s:4
store $.d, $.s  :=      0x7c:8 .d:4 .s:4

; 8 is decode state

; 8 bit opcode      ; nick will set qat stuff to sys calls
not @.a 	:=	0x90:8 .a:8
one @.a 	:=	0x91:8 .a:8
zero @.a	:=	0x92:8 .a:8

had @.a, .imm4  :=      0xa:4 .imm4:4 .a:8

; 8 bit opcode
cnot @.a, @.b	:=	0xb0:8 .a:8 .b:8 0:8
swap @.a, @.b	:=	0xb1:8 .a:8 .b:8 0:8

; 8 bit opcode
ccnot @.a, @.b, @.c	:=	0xc0:8 .a:8 .b:8 .c:8
cswap @.a, @.b, @.c	:=	0xc1:8 .a:8 .b:8 .c:8
and @.a, @.b, @.c	:=	0xc3:8 .a:8 .b:8 .c:8
or @.a, @.b, @.c        :=      0xc4:8 .a:8 .b:8 .c:8
xor @.a, @.b, @.c	:=	0xc5:8 .a:8 .b:8 .c:8

; start state begins with 0xd

; 4 bit opcode
meas $.d, @.a   :=	0xe:4 .d:4 .a:8
next $.d, @.a   :=	0xf:4 .d:4 .a:8

.const r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 r10 at rv ra fp sp

.segment .text	 16	 0x10000 0	 .VMEM
.segment .data	 16	 0x10000 0	 .VMEM

; synthesized instructions
; treated as SDIs

; really brt $sp, .addr
br .addr        :=      0x3:4 sp:4 (.addr-.):8

; lex $.d, .imm16 or lex $.d, .imm16 then lhi $.d, (.imm16>>8)
load $.d, .imm16        ?(((.imm16&0xff80)==0xff80) || ((.imm16&0xff80)==0x0000)) {
		        :=	0x4:4 .d:4 .imm16:8 }
load $.d, .imm16        :=      0x4:4 .d:4 .imm16:8 0x5:4 .d:4 (.imm16>>8):8

; br .addr or lex $at, .addr then lhi $at, .addr then jumpr $at
jump .addr      ?(((.addr-.)>=-128)&&((.addr-.)<=127)) {
		:= 0x3:4 sp:4 (.addr-.):8 }
jump .addr	:=  { 0x4:4 at:4 .addr:8
		      0x5:4 at:4 (.addr>>8):8
		      0x10:8 at:4 0:4 }

; brt or sequence of brf, lex, lhi, jumpr
jumpt $.d, .addr	?(((.addr-.)>=-128)&&((.addr-.)<=127)) {
			:= 0x3:4 .d:4 (.addr-.):8 }
jumpt $.d, .addr	:=  { 0x2:4 .d:4 4:8
                              0x4:4 at:4 .addr:8
                              0x5:4 at:4 (.addr>>8):8
                              0x10:8 at:4 0:4 }

; brf or sequence of brt, lex, lhi, jumpr
jumpf $.d, .addr        ?(((.addr-.)>=-128)&&((.addr-.)<=127)) {
			:= 0x2:4 .d:4 (.addr-.):8 }
jumpf $.d, .addr        :=  { 0x3:4 .d:4 4:8
                              0x4:4 at:4 .addr:8
                              0x5:4 at:4 (.addr>>8):8
                              0x10:8 at:4 0:4 }

