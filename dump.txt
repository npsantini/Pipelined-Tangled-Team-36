$date
	Fri Oct 30 13:16:20 2020
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module testbench $end
$scope module PE $end
$var wire 1 ! clk $end
$var wire 1 " pendpc $end
$var wire 1 # pendz $end
$var wire 1 $ reset $end
$var reg 1 % halt $end
$var reg 1 & havepre $end
$var reg 16 ' im0 [15:0] $end
$var reg 16 ( ir [15:0] $end
$var reg 16 ) ir0 [15:0] $end
$var reg 16 * ir1 [15:0] $end
$var reg 1 + jump $end
$var reg 16 , pc [15:0] $end
$var reg 16 - pc0 [15:0] $end
$var reg 12 . prefix [11:0] $end
$var reg 16 / rd1 [15:0] $end
$var reg 16 0 res [15:0] $end
$var reg 16 1 rn1 [15:0] $end
$var reg 16 2 target [15:0] $end
$var reg 16 3 tpc [15:0] $end
$var reg 1 4 wait1 $end
$var reg 1 5 zreg $end
$scope function iscond $end
$var reg 16 6 inst [15:0] $end
$var reg 1 7 iscond $end
$upscope $end
$scope function setspc $end
$var reg 16 8 inst [15:0] $end
$var reg 1 9 setspc $end
$upscope $end
$scope function setsrd $end
$var reg 16 : inst [15:0] $end
$var reg 1 ; setsrd $end
$upscope $end
$scope function setsz $end
$var reg 16 < inst [15:0] $end
$var reg 1 = setsz $end
$upscope $end
$scope function usesim $end
$var reg 16 > inst [15:0] $end
$var reg 1 ? usesim $end
$upscope $end
$scope function usesrd $end
$var reg 16 @ inst [15:0] $end
$var reg 1 A usesrd $end
$upscope $end
$scope function usesrn $end
$var reg 16 B inst [15:0] $end
$var reg 1 C usesrn $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
xC
bx B
xA
bx @
x?
bx >
0=
b0 <
0;
b0 :
09
b0 8
x7
bx 6
x5
x4
bx 3
bx 2
bx 1
bx 0
bx /
bx .
bx -
b0 ,
0+
b0 *
b0 )
bx (
bx '
0&
0%
0$
0#
0"
0!
$end
#10
1$
#20
0$
#30
x#
x"
x=
bx <
x9
x;
bx :
bx 8
b0 -
b1 ,
bx )
b0 3
x?
bx >
04
1C
b0 B
0A
b0 @
1!
#40
0!
#50
bx *
b1 -
b10 ,
xC
bx B
xA
bx @
x;
bx :
b1 3
1!
#60
0!
#70
b10 -
b11 ,
1%
b10 3
1!
#80
0!
