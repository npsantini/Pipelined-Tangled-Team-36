$date
	Fri Nov  6 14:45:30 2020
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module testbench $end
$scope module PE $end
$var wire 1 ! clk $end
$var wire 1 " halt $end
$var wire 16 # instr [15:0] $end
$var wire 16 $ regfile_rdValue [15:0] $end
$var wire 1 % reset $end
$var wire 1 & shouldBrJmp $end
$var wire 16 ' sxi [15:0] $end
$var wire 16 ( ps2_rsValue [15:0] $end
$var wire 16 ) ps2_rdValue [15:0] $end
$var wire 16 * brJmpTarget [15:0] $end
$var wire 16 + aluOut [15:0] $end
$var reg 16 , pc [15:0] $end
$var reg 1 - ps0_halt $end
$var reg 1 . ps2_bubble $end
$var reg 1 / psr01_halt $end
$var reg 16 0 psr01_ir [15:0] $end
$var reg 4 1 psr12_aluOp [3:0] $end
$var reg 1 2 psr12_branchTarget $end
$var reg 1 3 psr12_brf $end
$var reg 1 4 psr12_brt $end
$var reg 1 5 psr12_halt $end
$var reg 1 6 psr12_jumpr $end
$var reg 1 7 psr12_memWrite $end
$var reg 4 8 psr12_rdIndex [3:0] $end
$var reg 16 9 psr12_rdValue [15:0] $end
$var reg 4 : psr12_rsIndex [3:0] $end
$var reg 16 ; psr12_rsValue [15:0] $end
$var reg 2 < psr12_wbSource [1:0] $end
$var reg 1 = psr12_writeBack $end
$var reg 1 > psr23_bubble $end
$var reg 1 ? psr23_halt $end
$var reg 4 @ psr23_wbIndex [3:0] $end
$var reg 16 A psr23_wbValue [15:0] $end
$var reg 1 B psr23_writeBack $end
$scope function is2WordFrmt $end
$var reg 16 C instr [15:0] $end
$var reg 1 D is2WordFrmt $end
$upscope $end
$scope function isBrf $end
$var reg 16 E instr [15:0] $end
$var reg 1 F isBrf $end
$upscope $end
$scope function isBrt $end
$var reg 16 G instr [15:0] $end
$var reg 1 H isBrt $end
$upscope $end
$scope function isJumpr $end
$var reg 16 I instr [15:0] $end
$var reg 1 J isJumpr $end
$upscope $end
$scope function isLex $end
$var reg 16 K instr [15:0] $end
$var reg 1 L isLex $end
$upscope $end
$scope function isLhi $end
$var reg 16 M instr [15:0] $end
$var reg 1 N isLhi $end
$upscope $end
$scope function isLoad $end
$var reg 16 O instr [15:0] $end
$var reg 1 P isLoad $end
$upscope $end
$scope function isStore $end
$var reg 16 Q instr [15:0] $end
$var reg 1 R isStore $end
$upscope $end
$scope function isSysOrQat $end
$var reg 16 S instr [15:0] $end
$var reg 1 T isSysOrQat $end
$upscope $end
$scope function isWriteBack $end
$var reg 3 U f0Op [2:0] $end
$var reg 16 V instr [15:0] $end
$var reg 1 W isWriteBack $end
$upscope $end
$scope function usesALU $end
$var reg 16 X instr [15:0] $end
$var reg 1 Y usesALU $end
$upscope $end
$scope module alu $end
$var wire 16 Z a [15:0] $end
$var wire 16 [ b [15:0] $end
$var wire 4 \ op [3:0] $end
$var wire 16 ] i2fout [15:0] $end
$var wire 1 ^ fsltout $end
$var wire 16 _ frecipout [15:0] $end
$var wire 16 ` fnegout [15:0] $end
$var wire 16 a fmulout [15:0] $end
$var wire 16 b faddout [15:0] $end
$var wire 16 c f2iout [15:0] $end
$var reg 16 d out [15:0] $end
$scope module myf2i $end
$var wire 16 e f [15:0] $end
$var wire 16 f ui [15:0] $end
$var wire 1 g tiny $end
$var wire 16 h result [15:0] $end
$var wire 16 i i [15:0] $end
$var wire 1 j big $end
$scope module m0 $end
$var wire 16 k a [15:0] $end
$var wire 16 l b [15:0] $end
$var wire 1 m torf $end
$var wire 1 g result $end
$upscope $end
$scope module m1 $end
$var wire 16 n a [15:0] $end
$var wire 16 o b [15:0] $end
$var wire 1 p torf $end
$var wire 1 j result $end
$upscope $end
$upscope $end
$scope module myfadd $end
$var wire 16 q a [15:0] $end
$var wire 16 r b [15:0] $end
$var wire 1 s eqsgn $end
$var wire 8 t texp [7:0] $end
$var wire 8 u tbman [7:0] $end
$var wire 8 v taman [7:0] $end
$var wire 1 w ssign $end
$var wire 9 x sman [8:0] $end
$var wire 5 y slead [4:0] $end
$var wire 9 z sfrac [8:0] $end
$var wire 9 { sexp [8:0] $end
$var wire 16 | s [15:0] $end
$var wire 16 } result [15:0] $end
$var wire 16 ~ r [15:0] $end
$var wire 1 !" amgt $end
$var wire 1 "" aegt $end
$scope module m0 $end
$var wire 16 #" s [15:0] $end
$var wire 5 $" t [4:0] $end
$var wire 8 %" s8 [7:0] $end
$var wire 4 &" s4 [3:0] $end
$var wire 2 '" s2 [1:0] $end
$var wire 5 (" d [4:0] $end
$upscope $end
$upscope $end
$scope module myfmul $end
$var wire 16 )" a [15:0] $end
$var wire 16 *" b [15:0] $end
$var wire 1 +" s $end
$var wire 16 ," result [15:0] $end
$var wire 16 -" r [15:0] $end
$var wire 16 ." m [15:0] $end
$var wire 8 /" e [7:0] $end
$upscope $end
$scope module myfneg $end
$var wire 16 0" f [15:0] $end
$var wire 16 1" result [15:0] $end
$upscope $end
$scope module myfrecip $end
$var wire 16 2" a [15:0] $end
$var wire 16 3" result [15:0] $end
$var wire 16 4" r [15:0] $end
$upscope $end
$scope module myfslt $end
$var wire 16 5" a [15:0] $end
$var wire 16 6" b [15:0] $end
$var wire 1 7" torf $end
$var wire 1 ^ result $end
$upscope $end
$scope module myi2f $end
$var wire 16 8" i [15:0] $end
$var wire 16 9" pos [15:0] $end
$var wire 5 :" lead [4:0] $end
$var wire 16 ;" f [15:0] $end
$scope module m0 $end
$var wire 16 <" s [15:0] $end
$var wire 5 =" t [4:0] $end
$var wire 8 >" s8 [7:0] $end
$var wire 4 ?" s4 [3:0] $end
$var wire 2 @" s2 [1:0] $end
$var wire 5 A" d [4:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx A"
bx @"
bx ?"
bx >"
b0xxxx ="
bx <"
bx ;"
bx :"
bx 9"
bx 8"
x7"
bx 6"
bx 5"
bx 4"
bx 3"
bx 2"
bx 1"
bx 0"
bx /"
bx ."
bx -"
bx ,"
x+"
bx *"
bx )"
bx ("
bx '"
bx &"
bx %"
b0xxxx $"
bx0000000 #"
x""
x!"
bx ~
bx }
bx |
bx {
bx z
bx y
bx x
xw
bx v
bx u
bx t
xs
bx r
bx q
xp
bx o
b100011011111111 n
xm
b1100011100000000 l
bx k
xj
bx i
bx h
xg
bx f
bx e
bx d
bx c
bx b
bx a
bx `
bx _
x^
bx ]
bx \
bx [
bx Z
xY
bx X
xW
bx V
bx U
xT
bx S
xR
bx Q
xP
bx O
xN
bx M
xL
bx K
xJ
bx I
xH
bx G
xF
bx E
xD
bx C
xB
bx A
bx @
x?
x>
x=
bx <
bx ;
bx :
bx 9
bx 8
x7
x6
x5
x4
x3
x2
bx 1
bx 0
x/
x.
x-
bx ,
bx +
bx *
bx )
bx (
bx '
x&
0%
bx $
bx #
x"
0!
$end
#10
b1 {
b100000000 z
b10 '"
b1000 &"
b0 @"
b10000000 %"
b0 $"
b0 ?"
b0 c
b0 h
0g
b0 y
b0 ("
0^
b0 i
0j
0m
b1000000000000000 #"
b100000000 x
b10000000 |
b0 >"
b1111 ="
07"
0p
0!"
b10000000 v
b0 a
b0 ,"
b10000 :"
b10000 A"
0&
b10000000 u
b10000001 /"
b0 f
b0 t
1s
0w
b0 b
b0 }
0+"
b0 -"
b1000000000000000 `
b1000000000000000 1"
b111111100000000 _
b111111100000000 3"
0""
b100000000000000 ."
b0 ~
b111111100000000 4"
b0 9"
b0 <"
b0 ]
b0 ;"
b1000001000000001 #
0"
b0 *
b1111111111111111 +
b1111111111111111 d
b0 (
b0 [
b0 r
b0 *"
b0 6"
b0 )
b0 Z
b0 e
b0 k
b0 o
b0 q
b0 )"
b0 0"
b0 2"
b0 5"
b0 8"
b0 '
b1 $
b0 ,
0-
1?
0>
b0 A
b0 @
0B
15
06
04
03
02
b0 <
0=
07
b0 1
b0 \
b0 ;
b0 9
b0 :
b0 8
1/
b0 0
1%
#20
0%
#30
b1 '
b1000010000000100 #
0/
b1000001000000001 0
b1 ,
0T
b1000001000000001 S
0D
b1000001000000001 C
1!
#40
0!
#50
b1 @"
b1 ?"
b10000001 %"
b10000001 |
b1 >"
b1000000100000000 #"
b100000010 z
b100000010 x
b100000010000010 a
b100000010000010 ,"
b1111 :"
b1111 A"
b10000001 u
0!"
b10000001 v
b10000001 b
b10000001 }
b100000010000010 -"
b1000000000000001 `
b1000000000000001 1"
b111111011111110 _
b111111011111110 3"
b11111110000000 ]
b11111110000000 ;"
b10000001 ~
b100000100000001 ."
b111111011111110 4"
b1 9"
b1 <"
b1111111111111110 +
b1111111111111110 d
b1 (
b1 [
b1 r
b1 *"
b1 6"
b1 )
b1 Z
b1 e
b1 k
b1 o
b1 q
b1 )"
b1 0"
b1 2"
b1 5"
b1 8"
b100 '
b10001001100010 #
05
b10 <
1=
b1 ;
b1 9
b1 :
b1 8
b1000010000000100 0
b10 ,
0P
b1000001000000001 O
0Y
b1000001000000001 X
1W
b0 U
b1000001000000001 V
0R
b1000001000000001 Q
1L
b1000001000000001 K
b1000010000000100 S
b1000010000000100 C
1!
#60
0!
#70
b100000010000000 ]
b100000010000000 ;"
b1101 :"
b1101 A"
b1101 ="
b10000010 b
b10000010 }
b10000010 ~
b100 ?"
b10000010 %"
b10000010 |
b100000010000101 a
b100000010000101 ,"
b100000010000101 -"
b100 >"
b1000001010000000 #"
b100000101 z
b100000101 x
1!"
b10000100 v
b1000000000000100 `
b1000000000000100 1"
b111111011111000 _
b111111011111000 3"
b100001010000100 ."
b111111011111000 4"
b100 9"
b100 <"
b1111111111111011 +
b1111111111111011 d
b1100010 '
b0 #
b100 )
b100 Z
b100 e
b100 k
b100 o
b100 q
b100 )"
b100 0"
b100 2"
b100 5"
b100 8"
b10001001100010 0
b11 ,
b100 9
b100 :
b10 8
0?
0.
b1 A
b1 @
1B
b10001001100010 S
b10001001100010 C
b1000010000000100 O
b1000010000000100 X
b1000010000000100 V
b1000010000000100 Q
b1000010000000100 K
1!
#80
0!
#90
b1111 :"
b1111 A"
b1111 ="
b10000010 b
b10000010 }
b10000010 ~
b1 ?"
1^
b10000010 %"
b10000010 |
b100000010000101 a
b100000010000101 ,"
17"
b100000010000101 -"
b1 >"
b10000100 u
b1000001010000000 #"
b100000101 z
b100000101 x
b11111110000000 ]
b11111110000000 ;"
0!"
b10000001 v
b1000000000000001 `
b1000000000000001 1"
b111111011111110 _
b111111011111110 3"
b100 (
b100 [
b100 r
b100 *"
b100 6"
b100001010000100 ."
b111111011111110 4"
b1 9"
b1 <"
b1 *
b101 +
b101 d
b1 )
b1 Z
b1 e
b1 k
b1 o
b1 q
b1 )"
b1 0"
b1 2"
b1 5"
b1 8"
b0 '
b100 A
b10 @
12
b0 <
b110 1
b110 \
b1 9
b10 :
b1 8
1-
1/
b0 0
b100 ,
1Y
b10001001100010 X
b10 U
b10001001100010 V
b10001001100010 Q
0N
b10001001100010 M
0L
b10001001100010 K
1T
b0 S
b0 C
1!
#100
0!
#110
b100000010100000 ]
b100000010100000 ;"
b1101 :"
b1101 A"
b1101 ="
b10000011 b
b10000011 }
b10000011 ~
b101 ?"
b10000011 %"
b10000011 |
b100000010000110 a
b100000010000110 ,"
0^
b101 >"
b100000010000110 -"
b1000001100000000 #"
b100000110 z
b100000110 x
07"
1!"
b10000101 v
b1000000000000101 `
b1000000000000101 1"
b111111011110110 _
b111111011110110 3"
b10000001 u
b111111011110110 4"
b101 9"
b101 <"
b100001100000101 ."
b110 +
b110 d
b101 )
b101 Z
b101 e
b101 k
b101 o
b101 q
b101 )"
b101 0"
b101 2"
b101 5"
b101 8"
b1 (
b1 [
b1 r
b1 *"
b1 6"
15
b101 A
b1 @
1!
#120
0!
#130
1"
1?
1!
#140
0!
