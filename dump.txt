$date
	Mon Nov  2 14:43:28 2020
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module testbench $end
$scope module PE $end
$var wire 1 ! clk $end
$var wire 1 " pendpc $end
$var wire 1 # reset $end
$var reg 1 $ halt $end
$var reg 1 % havepre $end
$var reg 16 & im0 [15:0] $end
$var reg 16 ' ir [15:0] $end
$var reg 16 ( ir0 [15:0] $end
$var reg 16 ) ir1 [15:0] $end
$var reg 1 * jump $end
$var reg 16 + pc [15:0] $end
$var reg 16 , pc0 [15:0] $end
$var reg 12 - prefix [11:0] $end
$var reg 16 . rd1 [15:0] $end
$var reg 16 / res [15:0] $end
$var reg 16 0 rs1 [15:0] $end
$var reg 16 1 target [15:0] $end
$var reg 16 2 tpc [15:0] $end
$var reg 1 3 wait1 $end
$scope function setspc $end
$var reg 16 4 inst [15:0] $end
$var reg 1 5 setspc $end
$upscope $end
$scope function setsrd $end
$var reg 16 6 inst [15:0] $end
$var reg 1 7 setsrd $end
$upscope $end
$scope function usesim $end
$var reg 16 8 inst [15:0] $end
$var reg 1 9 usesim $end
$upscope $end
$scope function usesrd $end
$var reg 16 : inst [15:0] $end
$var reg 1 ; usesrd $end
$upscope $end
$scope function usesrs $end
$var reg 16 < inst [15:0] $end
$var reg 1 = usesrs $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
x=
bx <
x;
bx :
x9
bx 8
07
b0 6
05
b0 4
x3
bx 2
bx 1
bx 0
bx /
bx .
bx -
bx ,
b0 +
0*
b0 )
b0 (
bx '
bx &
0%
0$
0#
0"
0!
$end
#10
1#
#20
0#
#30
b0 ,
b1 +
b100000101 -
1%
b100000100000101 '
b0 2
09
b0 8
03
1=
b0 <
0;
b0 :
1!
#40
0!
#50
b1000000010000 6
b1000000010000 4
b1 ,
b10 +
b1000000010000 (
b0 8
b1000000010000 '
b1 2
1!
#60
0!
#70
b0 4
b10 ,
b11 +
b0 (
b0 -
b1000000010000 )
b0 '
b10 2
b1000000010000 8
b1000000010000 <
b1000000010000 :
b0 6
1!
#80
0!
#90
1$
b0 )
b11 ,
b100 +
b0 8
b0 <
b0 :
b0 6
b11 2
1!
#100
0!
